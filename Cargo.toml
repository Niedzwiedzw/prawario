# You must change these to your own details.
[package]
name = "prawario"
description = "My super awesome Rust, WebAssembly, and Webpack project!"
version = "0.1.0"
authors = ["You <you@example.com>"]
categories = ["wasm"]
readme = "README.md"
edition = "2018"

[lib]
crate-type = ["cdylib"]

[[bin]]
name = "backend"
path = "src/main.rs"

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true

[features]
# If you uncomment this line, it will enable `wee_alloc`:
default = ["wee_alloc", "backend"]
#default = ["backend"]
backend = ["tokio", "warp", "futures_new", "pretty_env_logger"]
client = ["wee_alloc", "futures_new"]

[dependencies]
# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = "0.2.45"
js-sys = "0.3"
tungstenite = {version = "0.10.0", optional = true }
wee_alloc = { version = "0.4.2", optional = true }
# tokio-tungstenite = {version = "0.10.1", optional = true }
# log = {version = "0.4", optional=true }
# futures-util = { version = "0.3", default-features = false, features = ["async-await", "sink", "stds"], optional = true }
# pin-project = {version = "0.4.17", optional=true }
# tokio = { version = "0.2", default-features = false, features = ["io-util", "macros", "tcp", "dns", "io-util"], optional = true }
# env_logger = { version = "*", optional = true }
# tokio = {version = "*", optional = true}
# tokio = {version = "*", optional = true}
tokio = { version = "0.2", features = ["macros", "time"], optional = true }
warp = {version = "0.2", optional = true, features = ["websocket"]}
futures_new = { package = "futures", version = "0.3", default-features = false, features = ["alloc"], optional = true }
pretty_env_logger = {version = "0.4", optional = true}
serde_json = "1.0"
serde = "1.0"
itertools = "*"


[dependencies.quicksilver]
version = "0.4.0-alpha0.5"
features = ["web-sys", "saving"]

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator, so it's not enabled by default.

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
version = "0.3.22"
features = [
  "BinaryType",
  "Blob",
  "ErrorEvent",
  "FileReader",
  "MessageEvent",
  "ProgressEvent",
  "WebSocket",
  "console",
]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# in debug mode.
[target."cfg(debug_assertions)".dependencies]
console_error_panic_hook = "0.1.5"

# These crates are used for running unit tests.
[dev-dependencies]
wasm-bindgen-test = "0.2.45"
futures = "0.1.27"
js-sys = "0.3.22"
wasm-bindgen-futures = "0.3.22"
